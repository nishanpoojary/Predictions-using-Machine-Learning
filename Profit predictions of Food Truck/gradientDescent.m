function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ======================  CODE HERE ======================
    
    thetaZero = theta(1, 1) - (alpha * sum(((X*theta)-y)./m));
    thetaOne = theta(2, 1) - (alpha * 1/m * sum((((X*theta)-y)).*X(:,2)));

    theta = [thetaZero; thetaOne];



    %   ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
    
end

end
